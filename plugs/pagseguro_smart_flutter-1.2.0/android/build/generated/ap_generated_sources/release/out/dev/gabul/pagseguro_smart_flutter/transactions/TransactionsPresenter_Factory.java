// Generated by Dagger (https://dagger.dev).
package dev.gabul.pagseguro_smart_flutter.transactions;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TransactionsPresenter_Factory implements Factory<TransactionsPresenter> {
  private final Provider<TransactionsUseCase> useCaseProvider;

  private final Provider<TransactionsFragment> fragmentProvider;

  public TransactionsPresenter_Factory(Provider<TransactionsUseCase> useCaseProvider,
      Provider<TransactionsFragment> fragmentProvider) {
    this.useCaseProvider = useCaseProvider;
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public TransactionsPresenter get() {
    return newInstance(useCaseProvider.get(), fragmentProvider.get());
  }

  public static TransactionsPresenter_Factory create(Provider<TransactionsUseCase> useCaseProvider,
      Provider<TransactionsFragment> fragmentProvider) {
    return new TransactionsPresenter_Factory(useCaseProvider, fragmentProvider);
  }

  public static TransactionsPresenter newInstance(TransactionsUseCase useCase,
      TransactionsFragment fragment) {
    return new TransactionsPresenter(useCase, fragment);
  }
}
