// Generated by Dagger (https://dagger.dev).
package dev.gabul.pagseguro_smart_flutter.printer.usecase;

import br.com.uol.pagseguro.plugpagservice.wrapper.PlugPag;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.flutter.plugin.common.MethodChannel;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PrinterUsecase_Factory implements Factory<PrinterUsecase> {
  private final Provider<PlugPag> plugPagProvider;

  private final Provider<MethodChannel> channelProvider;

  public PrinterUsecase_Factory(Provider<PlugPag> plugPagProvider,
      Provider<MethodChannel> channelProvider) {
    this.plugPagProvider = plugPagProvider;
    this.channelProvider = channelProvider;
  }

  @Override
  public PrinterUsecase get() {
    return newInstance(plugPagProvider.get(), channelProvider.get());
  }

  public static PrinterUsecase_Factory create(Provider<PlugPag> plugPagProvider,
      Provider<MethodChannel> channelProvider) {
    return new PrinterUsecase_Factory(plugPagProvider, channelProvider);
  }

  public static PrinterUsecase newInstance(PlugPag plugPag, MethodChannel channel) {
    return new PrinterUsecase(plugPag, channel);
  }
}
